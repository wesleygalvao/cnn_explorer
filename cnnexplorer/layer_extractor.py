from cnnexplorer.utils import get_submodule, get_number_maps
import torch


class ExtractCnnLayers:
    """
    Extracts layer information from a PyTorch CNN model.

    Parameters:
    -----------
    model : PyTorch model
        The PyTorch model from which layer information will be extracted.
    model_name : str, optional
        The name of the model. Default is None.

    Methods:
    --------
    get_layers(layers_paths: list) -> dict
        Extracts layer information from the model.
    """

    def __init__(
            self,
            model: torch.nn.Module,
            model_name: str = None
    ):
        """
        Initializes the ExtractCnnLayers object.

        Parameters:
        -----------
        model : PyTorch model
            The PyTorch model from which layer information will be extracted.
        model_name : str, optional
            The name of the model. Default is None.
        """
        self.model = model
        self.model_name = model_name

    def get_layers(self, layers_paths: list) -> dict:
        """
        Extracts layer information from the model.

        Parameters:
        -----------
        layers_paths : list
            A list of strings that represent the paths to the layers in the model.

        Returns:
        --------
        model_metadata : dict
            A dictionary containing the following keys and values:
            - 'model_name' : str
                The name of the model.
            - 'layer_path' : list of str
                The list of layer paths provided as input.
            - 'n_maps' : list of int
                The number of feature maps generated by each layer.
            - 'layer' : list
                The list of layer objects extracted from the model.
        """
        model_metadata = {
            "model_name": self.model_name,
            "layer_path": [],
            "n_maps": [],
            "layer": [],
        }

        for i, path in enumerate(layers_paths):
            # Get desired layer from model
            layer = get_submodule(self.model, path)

            n_maps = get_number_maps(self.model, layer)
            # Dict appending
            model_metadata["layer_path"].append(path)
            model_metadata["n_maps"].append(n_maps)
            model_metadata["layer"].append(layer)

        return model_metadata
